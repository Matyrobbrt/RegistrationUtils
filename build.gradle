import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

import java.time.OffsetDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

buildscript {
	dependencies {
		classpath 'org.codehaus.groovy:groovy-all:3.0.9'
	}
	// Hacky workaround to shadow using an outdated ASM version
	configurations.all {
		resolutionStrategy {
			force("org.ow2.asm:asm:9.3")
			force("org.ow2.asm:asm-commons:9.3")
		}
	}
}

plugins {
	id 'java-gradle-plugin'
	id 'maven-publish'
	id 'com.gradle.plugin-publish' version '0.18.0'
	id 'idea'
	id 'com.github.johnrengelman.shadow' version '8.+'
	id 'org.cadixdev.licenser' version '0.6.1' apply false
	// Required for NeoGradle
	id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

subprojects {
	apply plugin: 'java'
	java.toolchain.languageVersion = JavaLanguageVersion.of(17)
}

group = 'com.matyrobbrt.mc.registrationutils'

if (properties.hasProperty("testing")) {
	version = version + "-testing"
	println "New version: $version"
}

configurations {
	shade
	implementation.extendsFrom(shade)
}

repositories {
	maven { name = 'Forge'; url = 'https://maven.neoforged.net/' }
	maven { name = 'Fabric'; url = 'https://maven.fabricmc.net/' }
	maven { name = 'Sponge'; url = 'https://repo.spongepowered.org/repository/maven-public/' }
}

dependencies {
	shade 'net.minecraftforge:artifactural:3.0.10'
	// Thanks Shrimp...
	shade 'net.minecraftforge:unsafe:0.2.0'
	shade 'com.google.guava:guava:30.1-jre'

	shade 'org.ow2.asm:asm:9.3'
	shade 'org.ow2.asm:asm-tree:9.3'
	shade 'me.lucko:jar-relocator:1.5'
	shade 'commons-io:commons-io:2.13.0'

//	compileOnly 'fabric-loom:fabric-loom.gradle.plugin:0.12.21'
//	compileOnly 'org.spongepowered.gradle.plugin:org.spongepowered.gradle.plugin.gradle.plugin:2.0.2'
}

this.subprojects({
	afterEvaluate {
		final var name = project.getName()
		if (name == 'Common')
			createAndAddZipTask(name, name.toLowerCase(Locale.ROOT), {
				sourcePaths(rootProject.file('licenseheader.txt'))
				action(spec -> spec.rename('licenseheader.txt', 'com/matyrobbrt/registrationutils/LICENSE'))
			})
		else if (name != 'TestingProject')
			createAndAddZipTask(name, name.toLowerCase(Locale.ROOT))
	}
})

void createAndAddZipTask(String proj, String outName, Closure<?>... extra) {
	final var task = (ProcessResources) tasks.getByName('processResources')
	final var outPath = project.getLayout().getBuildDirectory().get().getAsFile().toPath().resolve("projectszip").resolve("${outName}-sources.zip")
	final var zip = tasks.create("${outName}Zip", Zip) {
		from "${proj}/src/main/java"
		from "${proj}/src/main/resources"
		for (final Closure<?> clos : extra) {
			final var conf = new ExtraConfiguration()
			clos.delegate = conf
			clos()
			from(conf.sourcePaths, conf.action)
		}
		destinationDirectory.set(outPath.getParent().toFile())
		archiveFileName.set("${outName}-sources.zip")
	}
	task.dependsOn(zip)
	final var jarTask = project(":${proj}").tasks.named('jar', org.gradle.jvm.tasks.Jar).get();
	for (final Closure<?> clos : extra) {
		final var conf = new ExtraConfiguration()
		clos.delegate = conf
		clos()
		jarTask.from(conf.sourcePaths, conf.action)
	}
	task.dependsOn(jarTask)
	task.from(outPath)
	final var out = List.copyOf(jarTask.getOutputs().getFiles().getFiles()).get(0);
	task.from(out).rename(out.getName(), "${outName}.zip")
}

class ExtraConfiguration {
	Object[] sourcePaths
	Action<? extends CopySpec> action = c -> {}

	def sourcePaths(Object... sourcePaths) {
		this.sourcePaths = sourcePaths
	}
	def action(Action<? extends CopySpec> action) {
		this.action = action
	}
}

pluginBundle {
	website = 'https://github.com/Matyrobbrt/RegistrationUtils'
	vcsUrl = 'https://github.com/Matyrobbrt/RegistrationUtils'
	tags = ['minecraft', 'forge', 'neoforge', 'fabric', 'quilt', 'multiloader']
}

components.java.withVariantsFromConfiguration(configurations.runtimeElements) {
    skip()
}
components.java.withVariantsFromConfiguration(configurations.apiElements) {
    skip()
}

gradlePlugin {
	plugins {
		registrationUtils {
			id = 'com.matyrobbrt.mc.registrationutils'
			displayName = 'RegistrationUtils'
			description = 'A Minecraft modding plugin providing a library for easy multiloader registration.'
			implementationClass = 'com.matyrobbrt.registrationutils.gradle.RegistrationUtilsPlugin'
		}
	}
}

publishing {
	repositories {
		maven {
			name = 'localPluginRepository'
			url = './maven'
		}
	}
}

tasks.named('shadowJar', ShadowJar).configure {
	archiveClassifier.set('')
	configurations = [project.configurations.shade]
	manifest.attributes(makeAttributes())
	enableRelocation true
	relocationPrefix("com.matyrobbrt.registrationutils.gradle.shade")
}

jar {
	archiveClassifier.set 'lite'
}

Map<?, ?> makeAttributes() {
	final var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)
	final var currentDateTime = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(actualDateTime)
	return [
		'Maven-Artifact'          : "${project.group}:${archivesBaseName}:${project.version}",
		'Specification-Title'     : archivesBaseName,
		'Specification-Vendor'    : 'Matyrobbrt',
		'Specification-Version'   : '1',
		'Implementation-Title'    : archivesBaseName,
		'Implementation-Version'  : "${project.version}",
		'Implementation-Vendor'   : 'Matyrobbrt',
		'Implementation-Timestamp': currentDateTime,
		'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
	]
}

allprojects {
	apply plugin: 'org.cadixdev.licenser'
	license {
		header = rootProject.file('licenseheader.txt')
	}
	repositories {
		mavenCentral()
	}
}